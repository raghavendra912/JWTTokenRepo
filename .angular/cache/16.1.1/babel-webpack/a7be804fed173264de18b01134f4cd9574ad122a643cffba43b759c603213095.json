{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'http://localhost:8080/api/auth/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(username, password) {\n    return this.http.post(AUTH_API + 'signin', {\n      username,\n      password\n    }, httpOptions);\n  }\n  register(username, email, password) {\n    return this.http.post(AUTH_API + 'signup', {\n      username,\n      email,\n      password\n    }, httpOptions);\n  }\n  logout() {\n    return this.http.post(AUTH_API + 'signout', {}, httpOptions);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","AUTH_API","httpOptions","headers","AuthService","constructor","http","login","username","password","post","register","email","logout","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\JWT_Authentication_Example\\angular-16-jwt-auth\\src\\app\\_services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nconst AUTH_API = 'http://localhost:8080/api/auth/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post(\n      AUTH_API + 'signin',\n      {\n        username,\n        password,\n      },\n      httpOptions\n    );\n  }\n\n  register(username: string, email: string, password: string): Observable<any> {\n    return this.http.post(\n      AUTH_API + 'signup',\n      {\n        username,\n        email,\n        password,\n      },\n      httpOptions\n    );\n  }\n\n  logout(): Observable<any> {\n    return this.http.post(AUTH_API + 'signout', { }, httpOptions);\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAI9D,MAAMC,QAAQ,GAAG,iCAAiC;AAElD,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAEhE;AAID,OAAM,MAAOI,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CACnBT,QAAQ,GAAG,QAAQ,EACnB;MACEO,QAAQ;MACRC;KACD,EACDP,WAAW,CACZ;EACH;EAEAS,QAAQA,CAACH,QAAgB,EAAEI,KAAa,EAAEH,QAAgB;IACxD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CACnBT,QAAQ,GAAG,QAAQ,EACnB;MACEO,QAAQ;MACRI,KAAK;MACLH;KACD,EACDP,WAAW,CACZ;EACH;EAEAW,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAACT,QAAQ,GAAG,SAAS,EAAE,EAAG,EAAEC,WAAW,CAAC;EAC/D;;AA7BWE,WAAW,C;mBAAXA,WAAW,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXb,WAAW,C;SAAXA,WAAW;EAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}